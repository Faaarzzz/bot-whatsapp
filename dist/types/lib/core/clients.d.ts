/// <reference types="node" />
import type { WASocket } from "@adiwajshing/baileys";
import type Logger from "../log";
import type Whatsapp from "../types";
import type { Readable } from "stream";
import Builder from "./cli";
import type { MimeType } from "file-type";
import { proto } from "@adiwajshing/baileys";
export default abstract class Client implements Whatsapp.IClient {
    constructor();
    abstract get from(): string;
    abstract get fromMe(): boolean;
    abstract get pushName(): string;
    abstract get id(): proto.IWebMessageInfo;
    abstract get message(): proto.IFutureProofMessage;
    abstract get isGroupMsg(): boolean;
    abstract get type(): keyof proto.IMessage;
    abstract get typeQuoted(): keyof proto.IMessage | undefined;
    abstract get quotedMsg(): proto.IContextInfo | undefined;
    abstract get sender(): string;
    abstract get botNumber(): string;
    abstract get body(): string;
    abstract get buttonsID(): string | undefined;
    abstract get bodyQuoted(): string | null | undefined;
    abstract get mentioned(): Array<string>;
    abstract get command(): string;
    abstract get args(): Array<string>;
    abstract get querry(): string | undefined;
    abstract get media(): Whatsapp.IMedia | null | undefined;
    abstract get isMedia(): boolean;
    abstract get isImage(): boolean;
    abstract get isVideo(): boolean;
    abstract get isAudio(): boolean;
    abstract get isDocument(): boolean;
    abstract get isSticker(): boolean;
    abstract sock: WASocket;
    abstract downloadMedia(media?: Whatsapp.IMedia | string, path?: string): Promise<string>;
    protected abstract log: Logger;
    abstract ParsedMentions(text: string): Array<string>;
    abstract decryptMedia(media?: Whatsapp.IMedia): Promise<Buffer>;
    Generate(from: string, content: string | Buffer | Readable | Whatsapp.ButtonsContent, type: keyof Whatsapp.ContentData, options?: Whatsapp.IOptionsMessage): Promise<proto.WebMessageInfo>;
    Generate(): Builder<proto.IMessage>;
    sendFile(from: string, content: string | Buffer | Readable, options?: Whatsapp.IOptionsMessage & {
        isDocs?: boolean;
    }): Promise<proto.IWebMessageInfo | void>;
    sendText(from: string, content: string): Promise<proto.WebMessageInfo | void>;
    sendTextWithMentions(from: string, content: string, id?: proto.IWebMessageInfo): Promise<proto.IWebMessageInfo | void>;
    reply(from: string, content: string, id?: proto.IWebMessageInfo): Promise<proto.WebMessageInfo | void>;
    wait(from: string, id: proto.IWebMessageInfo): Promise<proto.WebMessageInfo | void>;
    sendDocument(from: string, content: string | Buffer | Readable, options: Whatsapp.MetadataDocument): Promise<proto.WebMessageInfo>;
    sendAudio(from: string, content: string | Buffer | Readable, options?: Whatsapp.MetadataAudio): Promise<proto.WebMessageInfo>;
    static ParseExtentions(mimeType: MimeType): {
        type: keyof Whatsapp.ContentData;
        ext: string;
    } | undefined;
    private ParseExtentions;
    sendSticker(from: string, content: string | Buffer | Readable, options?: Whatsapp.MetadataSticker): Promise<proto.WebMessageInfo>;
    sendContact(from: string, content: Whatsapp.ContactsContent, ctx?: proto.IContextInfo): Promise<proto.IWebMessageInfo>;
    sendButtons(from: string, content: Whatsapp.ButtonsContent, options?: Whatsapp.MetadataDefault): Promise<proto.WebMessageInfo>;
    sendVideo(from: string, content: string | Buffer | Readable, options?: Whatsapp.MetadataVideo): Promise<proto.WebMessageInfo>;
    sendImage(from: string, content: string | Buffer | Readable, options?: Whatsapp.MetadataImage): Promise<proto.WebMessageInfo>;
    prepareMessage(from: string, content: proto.IMessage, options?: Whatsapp.IOptionsParams): Promise<proto.IWebMessageInfo>;
    relayMessage(content: proto.IWebMessageInfo): Promise<proto.IWebMessageInfo>;
}
