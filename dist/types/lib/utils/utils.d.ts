/// <reference types="node" />
import { Readable } from "stream";
import type { Prefix, OptionsAttemps } from "../types";
export declare const searchJSON: <T>(obj: any, key: string | Array<string>, output?: any) => T | undefined;
export declare const toBufferStream: (stream: Readable) => Promise<Buffer>;
export declare function checkURL(content: string, getRespon: true): Array<string>;
export declare function checkURL(content: string, getRespon?: false): boolean;
export declare function isBase64(str: string): boolean;
export declare function DeepKeysObject<T extends object>(t: T, path?: any): IterableIterator<string>;
export declare const GenerateID: () => string;
export declare function persen(awal: number, diskon: number): number;
export declare const toBuffer: (content: string | Buffer | Readable) => Promise<Buffer | null>;
export declare const compressImage: (content: string | Buffer | Readable) => Promise<Buffer | undefined>;
export declare const checkPrefix: (prefix: string | Array<string | RegExp> | RegExp, body: string) => Prefix | undefined;
export declare const runtime: () => string;
export declare const DEFAULT_PREFIX: string | RegExp | Array<string | RegExp>;
export declare function ParseCommand<T = Record<string, string | undefined>>(str: string, parse?: boolean): T;
export declare function ErrorHandle<V = any>(func: Array<any> | any, parameters: any, options?: Partial<OptionsAttemps>, callback?: (attemps: number, deskriptor?: string) => void, at?: number): Promise<V>;
export declare function Delay(ms: number): Promise<void>;
export declare function check(kata: string, validasi: string): number;
export declare function checkMatch(str: string, arr: string[]): Array<Array<string | unknown>>;
