import type { Database, ConfigSetObject } from "../types";
export default class EasyDB<T> implements Database<T> {
    private yourDB?;
    private db;
    constructor(yourDB?: Record<string, T> | undefined);
    DangerAccess(value: any): void;
    set(key: string, value: any): void;
    readDB(): Record<string, T>;
    add(key: string, value: T): void;
    static create<T>(): EasyDB<T>;
    Get(key: string): T | null | undefined;
    searchDB<SearchType>(key: string | Array<string>): SearchType | undefined;
    has(key: string): boolean;
    hasObject(key: string): boolean;
    static hasObject<T extends object>(obj: T, key: string): boolean;
    static getObject<T extends object, Value>(obj: T, key: string): Value | undefined;
    getObject<Value>(key: string): Value | undefined;
    setObject(config: string, value: any): Record<string, T>;
    setObject(config: ConfigSetObject): Record<string, T>;
    static setObject<T extends object>(obj: T, config: string, value: any, autoset?: boolean): T;
    static setObject<T extends object>(obj: T, config: ConfigSetObject, autoset?: boolean): T;
    removeObject(key: string): boolean;
    static removeObject<T extends object>(obj: T, key: string, autoSet: true): boolean;
    static removeObject<T extends object>(obj: T, key: string, autoSet: false): T;
    FindAndRemove(key: string): Record<string, T>;
    static FindAndRemove<T extends object>(obj: T, key: string, autoSet?: boolean): T | undefined;
    static FindHas<T extends object>(obj: T, key: string): boolean;
    FindAllAndRemove(Path: string): Record<string, T> | undefined;
    static FindAllAndRemove<T extends object>(obj: T, Path: string, autoSet?: boolean): T | undefined;
    FindAndSet(Path: string, value: any): Record<string, T> | undefined;
    static FindAndSet<T extends object, V = any>(obj: T, Path: string, value: any, autoSet?: boolean): V | undefined;
    static FindAndSetWithPath<T extends object>(obj: T, Path: string, path: string, value: any, autoSet?: boolean): T | undefined;
    FindAllAndSet(Path: string, value: any): Record<string, T> | undefined;
    static FindAllAndSet<T extends object>(obj: T, Path: string, value: any, autoSet?: boolean): T | undefined;
    FindAllAndGet<Value>(key: string): Value;
    static FindAllAndGet<T extends object, Value>(obj: T, key: string): Value;
    FindAndGet<V>(key: string): V;
    static FindAndGet<T extends object, Value>(obj: T, key: string): Value;
    static FindSpecificLocation<T extends object>(obj: T, located: string): Array<string>;
    private static DeepObject;
    static GetAllPathsLocated<T extends object>(obj: T): Array<string>;
    private static ParseCondition;
    remove(key: string | Array<string>): void;
    removeByKeys(keys: string): void;
    update(key: keyof T, value: T): void;
    reset(): void;
    get toArray(): T[];
    get all(): Record<string, T>;
}
